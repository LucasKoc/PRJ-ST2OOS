# Docker Compose file for the project
# This file is used to define the services, networks, and volumes for the project
# The .env file is used to define the environment variables for the services
# The environment variables are used to configure the services
version: '3.8'

services:
  database-api:
    # image: 450666049652775641901333182796/prjst2oos-database:stable
    image: prjst2oos-database-api:stable
    build:
      context: ./database-api
      dockerfile: Dockerfile
    container_name: ${POSTGRES_CONTAINER_NAME}
    environment:
      # Postgres environment variables, credentials for the database
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_SCHEMA=${POSTGRES_SCHEMA}
      # Postgres connection variables
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      # Volumes for the backend - To save PostgreSQL data
    volumes:
      - db-api-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - prjst2oos-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 10s
  api:
    # Image for the backend - Pull from Docker Hub
    # image: 450666049652775641901333182796/prjst2oos-api:stable
    image: prjst2oos-api:stable
    build:
      context: ./api
      dockerfile: Dockerfile
    # Container name
    container_name: ${API_CONTAINER_NAME}
    command: ["bash", "-c", "./wait-for-it.sh ${POSTGRES_HOST}:${POSTGRES_PORT} -- /app/venv/bin/python -m api.main"]
    # Environment variables for API
    environment:
      # Postgres environment variables, credentials for the database
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_SCHEMA=${POSTGRES_SCHEMA}
      - POSTGRES_HOST=${POSTGRES_CONTAINER_NAME}
      - POSTGRES_PORT=${POSTGRES_PORT}
      # Postgres connection variables
      - API_PORT=${API_PORT}
      - API_HOST=${API_HOST}
    ports:
      - "${API_PORT}:${API_PORT}"
    networks:
      - prjst2oos-network
    depends_on:
      - database-api
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 10s
  frontend:
    # Image for the frontend - Pull from Docker Hub
    # image: 450666049652775641901333182796/prjst2oos-frontend:stable
    image: prjst2oos-frontend:stable
    build:
      context: ./client
      dockerfile: Dockerfile
    # Container name
    container_name: ${FRONTEND_CONTAINER_NAME}
    # Environment variables for frontend
    ports:
      - "80:80"
    networks:
      - prjst2oos-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 10s
  database-grpc:
    # Image for the gRPC server - Pull from Docker Hub
    # image: 450666049652775641901333182796/prjst2oos-database-grpc:stable
    image: prjst2oos-database-grpc:stable
    build:
      context: ./database-grpc
      dockerfile: Dockerfile
    # Container name
    container_name: ${GRPC_MONGODB_CONTAINER_NAME}
    # Environment variables for gRPC
    environment:
      - GRPC_MONGODB_USER=${GRPC_MONGODB_USER}
      - GRPC_MONGODB_PASSWORD=${GRPC_MONGODB_PASSWORD}
      - GRPC_MONGODB_DATABASE=${GRPC_MONGODB_DATABASE}
      - GRPC_MONGODB_HOST=${GRPC_MONGODB_HOST}
      - GRPC_MONGODB_PORT=${GRPC_MONGODB_PORT}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "${GRPC_MONGODB_PORT}:${GRPC_MONGODB_PORT}"
    networks:
      - prjst2oos-network
    volumes:
      - db-grpc-data:/data/db
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 10s
  grpc:
    # Image for the gRPC server - Pull from Docker Hub
    # image: 450666049652775641901333182796/prjst2oos-grpc:stable
    image: prjst2oos-grpc:stable
    build:
      context: ./grpc
      dockerfile: Dockerfile
    # Container name
    container_name: ${GRPC_CONTAINER_NAME}
    # Environment variables for gRPC
    environment:
      - GRPC_PORT=${GRPC_PORT}
      - GRPC_MONGODB_HOST=${GRPC_MONGODB_CONTAINER_NAME}
      - GRPC_MONGODB_PORT=${GRPC_MONGODB_PORT}
      - GRPC_MONGODB_USER=${GRPC_MONGODB_USER}
      - GRPC_MONGODB_PASSWORD=${GRPC_MONGODB_PASSWORD}
      - GRPC_MONGODB_DATABASE=${GRPC_MONGODB_DATABASE}
    ports:
      - "${GRPC_PORT}:${GRPC_PORT}"
    networks:
      - prjst2oos-network
    depends_on:
      - database-grpc
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 10s

# Networks for the services - For communication between services
networks:
  prjst2oos-network:
    driver: bridge

# Volumes for the services
volumes:
  db-api-data: {}
  db-grpc-data: {}